-- local Core = exports['qb-core']:GetCoreObject()
-- -- defense area
-- local defense_central = nil
-- local defense_radius = {}
-- local peds = {}
-- local cenario_on = false
-- local zonaspawn = nil
-- local zonacenario = nil

-- RegisterNetEvent('pedcreator:client:menucreator', function()
--     local buttons = {}

--     if defense_central == nil then
--         buttons[1] = {
--             title = 'Registrar posição como centro da área',
--             onSelect = function()
--                 if defense_central == nil then
--                     TriggerEvent('pedcreator:client:point')
--                 else
--                     Core.Functions.Notify('Já foi criada uma área!', 'error')
--                 end
--             end,
--         }
--     else
--         buttons[1] = {
--             title = 'Escolher point',
--             disabled = true,
--         }
--     end

--     if defense_central ~= nil and cenario_on == true then
--         buttons[2] = {
--             title = 'Deseja refazer localização?',
--             onSelect = function()
--                 cenario_on = false
--                 defense_central = nil
--                 if zonaspawn ~= nil then
--                     zonaspawn:remove()
--                 end
--                 defense_radius = {}
--                 zonaspawn = nil
--                 if zonacenario ~= nil then
--                     zonacenario:remove()
--                 end
--                 zonacenario = nil
--                 for k, v in pairs(peds) do
--                     ClearPedTasks(v)
--                     DeleteEntity(v)
--                 end
--                 peds = {}
--                 TriggerServerEvent('pedclient:server:deletepeds', peds)
--                 TriggerEvent('pedcreator:client:point')
--             end,
--         }
--     else
--         buttons[2] = {
--             title = 'Selecione área - Falta escolher centro',
--             disabled = true,
--             onSelect = function()
--                 defense_central = nil
--                 defense_radius:remove()
--                 defense_radius = nil
--                 TriggerEvent('pedcreator:client:point')
--             end,
--         }
--     end

--     if defense_central ~= nil and defense_radius ~= nil and cenario_on == false then
--         buttons[3] = {
--             title = 'Iniciar Cenário',
--             onSelect = function()
--                 TriggerServerEvent('pedcreator:server:registerzone', defense_radius)
--             end
--         }
--     else
--         buttons[3] = {
--             title = 'Iniciar Cenário',
--             disabled = true,
--         }
--     end

--     lib.registerContext({
--         id = 'menu_creatorped',
--         title = 'Criador de cenarios',
--         options = buttons,

--     })
--     lib.showContext('menu_creatorped')
-- end)

-- RegisterNetEvent('pedcreator:client:point', function()
--     lib.showTextUI('Aperte [E] - Selecionar uma central')
--     while defense_central == nil do
--         if IsControlJustReleased(0, 38) then
--             break
--         end
--         Wait(2)
--     end

--     defense_central = GetEntityCoords(PlayerPedId())
--     print(defense_central)
--     lib.hideTextUI()

--     lib.notify({
--         description = 'Localização selecionada!',
--         type = 'success',
--     })

--     local input = lib.inputDialog('Ped Creator', {
--         {
--             type = 'select',
--             label = 'tipos de npc',
--             options = {
--                 {
--                     value = 'gang',
--                     label = 'gang',
--                 },
--                 {
--                     value = 'motoqueiros',
--                     label = 'motoqueiros',
--                 },
--                 {
--                     value = 'governo',
--                     label = 'governo',
--                 },
--                 {
--                     value = 'mexicano',
--                     label = 'mexicano',
--                 },
--                 {
--                     value = 'segurança',
--                     label = 'segurança',
--                 },
--             },
--             searchable = true,
--         },
--         { type = 'number', label = 'Área de Spawn',          description = 'Raio da área' },
--         { type = 'number', label = 'Quantidade de peds' },
--         { type = 'number', label = 'Dificuldade de 1 a 100', description = 'Mira dos ped', min = 1,  max = 100 },
--     })

--     defense_radius = {
--         coords = defense_central,
--         pedstype = input[1],
--         radius = input[2],
--         ped_quant = input[3],
--         ped_dificuldade = input[4],
--     }

--     lib.notify({
--         description = 'Dados registrados!',
--         type = 'success',
--     })
-- end)

-- RegisterNetEvent('pedcreator:client:zoneallserver', function(ped, cenario_server)
--     peds = ped
--     cenario_on = true

--     function onEnter_cenario(self)
--         -- local permission = lib.callback.await('pedcreator:callback:permission')
--         -- if permission ~= 'god' and permission ~= 'admin' then
--         local player = PlayerPedId()
--         SetPedRelationshipGroupHash(player, `PLAYER`)
--         AddRelationshipGroup('npcguards')

--         for k, v in ipairs(ped) do
--             local pedclient = NetworkGetEntityFromNetworkId(v)
--             SetEntityAsMissionEntity(pedclient, true)
--             SetEntityVisible(pedclient, true)
--             SetPedAccuracy(pedclient, cenario_server.ped_dificuldade)
--             SetPedCanSwitchWeapon(pedclient, true)
--             SetPedDropsWeaponsWhenDead(pedclient, false)
--             SetPedFleeAttributes(pedclient, 0, false)
--             TaskGuardCurrentPosition(pedclient, 10.0, 10.0, 1)
--             SetPedRelationshipGroupHash(pedclient, `npcguards`)
--         end

--         SetRelationshipBetweenGroups(0, `npcguards`, `npcguards`)
--         SetRelationshipBetweenGroups(5, `npcguards`, `PLAYER`)
--         SetRelationshipBetweenGroups(5, `PLAYER`, `npcguards`)
--         -- end
--     end

--     zonacenario = lib.zones.sphere({
--         coords = cenario_server.coords,
--         radius = cenario_server.radius * 3,
--         debug = false,
--         onEnter = onEnter_cenario,
--         onExit = onExit_cenario
--     })
-- end)
